: ROT ( a b c -- b c a )
  >R SWAP R> SWAP
;

: -ROT ( a b c -- c a b )
  SWAP >R SWAP R>
;

: DIP ( a q -- ... a ) \ Removes `a`, calls `q`, then pushes `a` back to the data stack
  SWAP >R CALL R>
;

: 2DIP ( a b q -- ... a b )
  -ROT >R >R CALL R> R> 
;

: 3DIP ( a b c q -- ... a b c )
  -ROT >R >R SWAP >R CALL R> R> R>
;

: KEEP ( a q -- ... a ) \ Copies `a`, calls `q`, then pushes the copy of `a` back to the data stack
  OVER SWAP CALL
;

: 2KEEP ( a b q -- ... a b )
  >R OVER OVER R> CALL
;

: 3KEEP ( a b c q -- ... a b c )
  >R YONDER YONDER YONDER R> CALL
;

: BSET ( bit n -- m )
  SWAP 01h << |
;

: BRES ( bit n -- m )
  SWAP 01h << FFh ^ &
;

: BGET ( bit n -- b ) 
  SWAP 01h << &
;

: +1 ( n -- m )
  01h +
;

: +2 ( n -- m )
  02h +
;

:: RPEEK R> DUP >R ;

: BREAK
  ASM`
    ld b,b
    jp Next
  `
;

: DATA-STACK
  ASM`
    ld h,b
    ld l,c
    PushD16
    jp Next
  `
;

: RETURN-STACK
  ASM`
    ld hl,sp+0
    PushD16
    jp Next
  `
;

: INTERP-PTR
  ASM`
    ld h,d
    ld l,e
    PushD16
    jp Next
  `
;

: DATA-STACK! ( n -- )
  ASM`
    PopD16
    ld b, h
    ld c, l
    jp Next
  `
;

: RETURN-STACK! ( n -- )
  ASM`
    PopD16
    ld sp,hl
    jp Next
  `
;

: INTERP-PTR! ( n -- )
  ASM`
    PopD16
    ld d,h
    ld e,l
    jp Next
  `
;

: +! ( n a -- )
  SWAP OVER @ + SWAP !
;

: WHILE ( q -- )
  DUP DIP SWAP
    [ [RECURSE] ]
    [ DROP ]
  IF
;

: TIMES ( n q -- )
  OVER 00h >
    [ 
      SWAP 01h - SWAP
      DUP 2DIP [RECURSE]
    ]
    [ DROP DROP ]
  IF
;

: WHEN ( ? q -- )
  [ ] IF
;

CONSTANT: TRUE  01h
CONSTANT: FALSE 00h

\ This is VERY SLOW, do not use unless you absolutely have to
: * ( a b -- a*b )
  01h - OVER SWAP
  [ SWAP DUP ROT + ] TIMES
  SWAP DROP
;

\ This is VERY SLOW, do not use unless you absolutely have to
: POW ( a b -- a**b )
  01h - OVER SWAP
  [ SWAP DUP ROT * ] TIMES
  SWAP DROP 
;
