INCLUDE" forth-prelude.ft"

( AUDIO REGISTERS )

\ Global Audio Registers
CONSTANT: NR52 FF26h \ Sound on/off
CONSTANT: NR51 FF25h \ Sound panning
CONSTANT: NR50 FF24h \ Master volume

: GLOBAL-SOUND-ON  10000000b NR52 C! ;
: GLOBAL-SOUND-OFF 00000000b NR52 C! ;

\ Channel 1 Audio Registers (Square + Sweep Channel)
CONSTANT: NR10 FF10h \ Sweep
CONSTANT: NR11 FF11h \ Length timer and duty cycle
CONSTANT: NR12 FF12h \ Volume and envelope
CONSTANT: NR13 FF13h \ Wavelength Low
CONSTANT: NR14 FF14h \ Wavelength High and control

\ Channel 2 Audio Registers (Square Channel)
CONSTANT: NR21 FF16h \ Length timer and duty cycle
CONSTANT: NR22 FF17h \ Volume and envelope
CONSTANT: NR23 FF18h \ Wavelength Low
CONSTANT: NR24 FF19h \ Wavelength High and control

\ Channel 3 Audio Registers (Sample Channel)
CONSTANT: NR30 FF1Ah \ DAC enable
CONSTANT: NR31 FF1Bh \ Length timer
CONSTANT: NR32 FF1Ch \ Output level
CONSTANT: NR33 FF1Dh \ Wavelength Low
CONSTANT: NR34 FF1Eh \ Wavelength High and control

CONSTANT: WAVE-RAM      FF30h \ Start of wave pattern RAM
CONSTANT: WAVE-RAM-SIZE 0Fh \ Length of wave pattern RAM

\ Channel 4 Audio Registers (Noise Channel)
CONSTANT: NR41 FF20h \ Length timer
CONSTANT: NR42 FF21h \ Volume and envelope
CONSTANT: NR43 FF22h \ Frequency and randomness
CONSTANT: NR44 FF23h \ Control

( VIDEO REGISTERS )

\ Tile pattern block addresses
CONSTANT: TILE-PATTERN-0    8000h
CONSTANT: TILE-PATTERN-1    8800h
CONSTANT: TILE-PATTERN-2    9000h
CONSTANT: TILE-PATTERN-SIZE 07FFh

\ Tile map addresses
CONSTANT: TILE-MAP-1    9800h
CONSTANT: TILE-MAP-2    9C00h
CONSTANT: TILE-MAP-SIZE 03FFh

\ LCD Control Register
CONSTANT: LCDC FF40h

: LCD-ENABLE ( n -- m ) 10000000b | ;
: LCD-DISABLE ( n -- m ) 10000000b NEG & ;

: LCD-WINDOW-TILE-MAP-0 ( n -- m ) 06h SWAP BRES ;
: LCD-WINDOW-TILE-MAP-1 ( n -- m ) 06h SWAP BSET ; 

: LCD-WINDOW-ENABLE ( n -- m ) 00100000b | ;
: LCD-WINDOW-DISABLE ( n -- m ) 00100000b NEG & ;

: LCD-BG-TILE-PATTERN-1 ( n -- m ) 04h SWAP BRES ;
: LCD-BG-TILE-PATTERN-0 ( n -- m ) 04h SWAP BSET ;

: LCD-BG-TILE-MAP-0 ( n -- m ) 03h SWAP BRES ;
: LCD-BG-TILE-MAP-1 ( n -- m ) 03h SWAP BSET ;

: LCD-OBJ-SIZE-8 ( n -- m ) 02h SWAP BRES ;
: LCD-OBJ-SIZE-16 ( n -- m ) 02h SWAP BSET ;

: LCD-OBJ-ENABLE ( n -- m ) 01h SWAP BSET ;
: LCD-OBJ-DISABLE ( n -- m ) 01h SWAP BRES ;

: LCD-BG-WINDOW-ENABLE ( n -- m ) 00h SWAP BSET ;
: LCD-BG-WINDOW-DISABLE ( n -- m ) 00h SWAP BRES ;

\ LCD Status Register
CONSTANT: STAT FF41h

: LYC=LY ( -- n ) 02h STAT C@ BGET 02h = ;
: STAT-MODE ( -- n ) STAT C@ 03h & ;

: WAIT-VBLANK ( -- )
  ASM"
  :
  ld a,[rLY]
  cp $90
  jr nz,:-
  jp Next
  "
;

\ Screen Position Registers
CONSTANT: SCREEN-Y FF42h
CONSTANT: SCREEN-X FF43h

\ LCD Y Line Registers
CONSTANT: LY  FF44h
CONSTANT: LYC FF45h

\ Palette Registers
CONSTANT: BGP  FF47h \ Background palette
CONSTANT: OBP0 FF48h \ Object palette 0
CONSTANT: OBP1 FF49h \ Object palette 1

\ Window Position Registers
CONSTANT: WINDOW-Y FF4Ah
CONSTANT: WINDOW-X FF4Bh

\ Sprite Table Attributes
CONSTANT: OAM-Y     00h
CONSTANT: OAM-X     01h
CONSTANT: OAM-INDEX 02h
CONSTANT: OAM-ATTR  03h

\ Sprite Table DMA Register
CONSTANT: OAM-DMA FF46h

( JOYPAD INPUT REGISTER )

CONSTANT: JOYPAD FF00h

: READ-JOYPAD ( -- a )
  ASM"
    ld a, $10
    ldh [$FF00], a
    ldh a, [$FF00]
    ldh a, [$FF00]
    ldh a, [$FF00]
    ldh a, [$FF00]
    ldh a, [$FF00]
    ldh a, [$FF00]
    and $0f
    xor $0f
    swap a
    ld h, a
    ld a, $20
    ldh [$FF00], a
    ldh a, [$FF00]
    ldh a, [$FF00]
    ldh a, [$FF00]
    ldh a, [$FF00]
    ldh a, [$FF00]
    ldh a, [$FF00]
    and $0f
    xor $0f
    or h 
    ld l, a
    ld h, $0
    PushD16
    jp Next
  "
;

CONSTANT: JOYPAD-RIGHT  01h
CONSTANT: JOYPAD-LEFT   02h
CONSTANT: JOYPAD-UP     04h
CONSTANT: JOYPAD-DOWN   08h
CONSTANT: JOYPAD-A      10h
CONSTANT: JOYPAD-B      20h
CONSTANT: JOYPAD-SELECT 40h
CONSTANT: JOYPAD-START  80h
 
: MEMCPY ( len src dst -- )
  ASM"
    push de
    push bc
    PopD16
    PopD
    ld d,a
    PopD
    ld e,a
    PopD
    ld b,a
    PopD
    ld c,a
    :
    ld a,[de]
    inc de
    ld [hl+],a
    dec bc
    ld a,c
    cp 0
    jr nz,:-
    ld a,b
    cp 0
    jr nz,:-
    pop bc
    inc bc
    inc bc
    inc bc
    inc bc
    inc bc
    inc bc
    pop de
    jp Next
  "
;

: MEMFILL ( len val dst -- )
  ASM"
    push de
    push bc
    PopD16
    ld d,h
    ld e,l
    PopD
    PopD
    push af
    PopD16
    ld b,h
    ld c,l
    ld h,d
    ld l,e
    pop af 
    :
    ld [hl+],a
    dec bc
    ld e,a
    ld a,c
    cp 0
    ld a,e
    jr nz,:-
    ld e,a
    ld a,b
    cp 0
    ld a,e
    jr nz,:-
    pop bc
    inc bc
    inc bc
    inc bc
    inc bc
    inc bc
    inc bc
    pop de
    jp Next
  "
;
