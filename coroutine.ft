INCLUDE" struct.ft"

\  q -> Quotation
\ cr -> Coroutine
\ rs -> Return Stack
\ ds -> Data Stack

\ Coroutine Struct:
\   0 : quotation
\   1 : return stack address
\   2 : data stack address

CONSTANT: CORO-ALIVE 01h
CONSTANT: CORO-DEAD  00h

STRUCT COROUTINE
       MEMBER: INTERP-PTR
       MEMBER: DATA-STACK
       MEMBER: RETURN-STACK
       MEMBER: STATUS
ENDSTRUCT

CREATE-COROUTINE VARIABLE: LAST-COROUTINE !

: SAVE-CURRENT-COROUTINE ( cr -- ) \ Saves the current coroutine into the coroutine object on the data stack
  ASM`
    PopD16
    ld a,e
    ld [hl+],a
    ld a,d
    ld [hl+],a
    ld a,c
    ld [hl+],a
    ld a,b
    ld [hl+],a
    push bc
    ld b,h
    ld c,l
    ld hl,sp+2
    ld a,l
    ld [bc],a
    inc bc
    ld a,h
    ld [bc],a
    pop bc
    jp Next
  `
;

: LOAD-COROUTINE ( cr -- ) \ Loads a coroutine from the current data stack and executes it
  ASM`
    PopD16
    ld a,[hl+]
    ld e,a
    ld a,[hl+]
    ld d,a
    ld a,[hl+]
    ld c,a
    ld a,[hl+]
    ld b,a
    ld a,[hl+]
    ld h,[hl]
    ld l,a
    ld sp,hl
    jp Next
  `
;

: LOAD-LAST-COROUTINE ( -- )
  LAST-COROUTINE @ LOAD-COROUTINE
;

00h VARIABLE: CURRENT-COROUTINE !
00h VARIABLE: YIELD-VALUE !

: KILL-CURRENT-COROUTINE ( -- )
  CORO-DEAD CURRENT-COROUTINE @ COROUTINE-STATUS!
  LOAD-LAST-COROUTINE
;

: ->COROUTINE ( q -- cr ) \ Converts a quotation into a coroutine
  CREATE-COROUTINE
  DUP -ROT COROUTINE-INTERP-PTR!
  DUP 20h CELLS ALLOT HERE @ SWAP COROUTINE-DATA-STACK!
  DUP 1Eh CELLS ALLOT ' KILL-CURRENT-COROUTINE 03h + ,
  HERE @ 02h - SWAP COROUTINE-RETURN-STACK!
  DUP CORO-ALIVE SWAP COROUTINE-STATUS!
;

: CALL-COROUTINE ( cr -- ... ) \ Starts/resumes the passed coroutine
  DUP COROUTINE-STATUS@ CORO-DEAD = [ DROP [EXIT] ] WHEN
  CURRENT-COROUTINE !
  LAST-COROUTINE @ SAVE-CURRENT-COROUTINE
  CURRENT-COROUTINE @ LOAD-COROUTINE
  YIELD-VALUE @
;

: YIELD ( n -- ) \ Halts the current coroutine and resumes the previous coroutine
  YIELD-VALUE !
  CURRENT-COROUTINE @ SAVE-CURRENT-COROUTINE
  LOAD-LAST-COROUTINE
;
