: STRCPY ( src dst -- )
  ASM`
    push de
    PopD16
    PopD
    ld d, a
    PopD
    ld e, a
    :
    ld a,[de]
    inc de
    ld [hl+],a
    cp 0
    jr nz,:-
    pop de
    jp Next
  `
;

: STRLEN ( str -- len )
  ASM`
  push de
  ld de,$ffff
  PopD16
  :
  inc de
  ld a,[hl+]
  cp 0
  jr nz,:-
  ld h,d
  ld l,e
  pop de
  PushD16 
  jp Next
  `
;

INCBIN" ascii.bin"
VARIABLE: ASCII-PATTERN !
VARIABLE: ASCII-SIZE !

: LOAD-FONT ( -- )
  ASCII-SIZE @ ASCII-PATTERN @ TILE-PATTERN-0 MEMCPY
;

: CLEAR-SCREEN ( -- )
  0800h 00h 9800h MEMFILL
;

9800h VARIABLE: PRINT-DEST !

20d VARIABLE: PRINT-WIDTH !

18d VARIABLE: PRINT-HEIGHT !

00d VARIABLE: CURSOR-X !

00d VARIABLE: CURSOR-Y !

: AT-CURSOR! ( val -- )
  PRINT-DEST @ CURSOR-X @ +
  05h CURSOR-Y @ << +
  C!
;

: SET-CURSOR! ( x y -- )
  CURSOR-Y !
  CURSOR-X !
;

: ADVANCE-CURSOR ( -- )
  CURSOR-X @ 01h + DUP CURSOR-X !
  14h < NOT
    [ 00h CURSOR-Y @ 01h + SET-CURSOR! ] 
  WHEN
  CURSOR-Y @ PRINT-HEIGHT @ < NOT
    [ 00h 00h SET-CURSOR! ]
  WHEN
;

: CR ( -- )
  00h CURSOR-X !
  CURSOR-Y @ 01h + CURSOR-Y !
;

: PRINT ( str -- )
  [
    DUP C@ 00h = NOT
      [ DUP C@ 32d - AT-CURSOR! ADVANCE-CURSOR ]
    WHEN
    DUP C@ 00h = NOT
    SWAP 01h + SWAP
  ] WHILE CR DROP
;

: NYBBLE-TO-CHAR ( n -- c )
  DUP 0Fh & 09h > 
    [ 37h + ]
    [ 30h + ]
  IF
;

: NUM-TO-STR ( n -- str )
  HERE @ SWAP
  DUP F000h & 12d SWAP >> NYBBLE-TO-CHAR C,
  DUP 0F00h &  8d SWAP >> NYBBLE-TO-CHAR C,
  DUP 00F0h &  4d SWAP >> NYBBLE-TO-CHAR C,
  000Fh & NYBBLE-TO-CHAR C,
  00h C,
;

: PRINT-CHAR ( c -- )
  AT-CURSOR! ADVANCE-CURSOR
;

