INCLUDE" gb-prelude.ft"
INCLUDE" struct.ft"

INCBIN" examples/pong/pong_tiles.bin" 
VARIABLE: PONG-TILES !
VARIABLE: PONG-SIZE !

: SCREEN-OFF
  WAIT-VBLANK
  00h
    LCD-DISABLE
  LCDC C!
;

: SCREEN-ON
  00h
    LCD-ENABLE
    LCD-OBJ-SIZE-8
    LCD-WINDOW-DISABLE
    LCD-BG-WINDOW-DISABLE
    LCD-OBJ-ENABLE
  LCDC C!
;

: LOAD-TILES
  E4h OBP0 C!
  PONG-SIZE @ PONG-TILES @ 8000h MEMCPY
;

CREATE-OAM-BUFFER VARIABLE: PONG-OAM !

: INIT-PONG-OAM
  FFh 00h PONG-OAM @ MEMFILL
;

00h VARIABLE: FRAME-STATE !

: UPDATE-FRAME-STATE
  01h FRAME-STATE +!
  FRAME-STATE @ 01h > [ 00h FRAME-STATE ! ] WHEN
;

STRUCT PADDLE
  MEMBER: X
  MEMBER: Y
  MEMBER: SPEED
ENDSTRUCT

STRUCT BALL
  MEMBER: X
  MEMBER: Y
  MEMBER: SPEED-X
  MEMBER: SPEED-Y
  MEMBER: DIR
ENDSTRUCT

CONSTANT: DIR-NW 00h
CONSTANT: DIR-NE 01h
CONSTANT: DIR-SW 02h
CONSTANT: DIR-SE 03h

CREATE-PADDLE VARIABLE: PADDLE-1 !
CREATE-PADDLE VARIABLE: PADDLE-2 !
CREATE-BALL   VARIABLE: BALL !

00h VARIABLE: SCORE-1 !
00h VARIABLE: SCORE-2 !

: INIT-PADDLE-1
  00h PONG-OAM @ OAM-ENTRY
    00h OVER OAM-TILE C!
    PADDLE-1 @ PADDLE-X@ OVER OAM-X C!
    PADDLE-1 @ PADDLE-Y@ OVER OAM-Y C!
    OAM-X-UNFLIP
  DROP
  01h PONG-OAM @ OAM-ENTRY
    01h OVER OAM-TILE C!
    PADDLE-1 @ PADDLE-X@ OVER OAM-X C!
    PADDLE-1 @ PADDLE-Y@ 08h + OVER OAM-Y C!
    OAM-X-UNFLIP
  DROP
;

: INIT-PADDLE-2
  02h PONG-OAM @ OAM-ENTRY
    00h OVER OAM-TILE C!
    PADDLE-2 @ PADDLE-X@ OVER OAM-X C!
    PADDLE-2 @ PADDLE-Y@ OVER OAM-Y C!
    OAM-X-FLIP
  DROP
  03h PONG-OAM @ OAM-ENTRY
    01h OVER OAM-TILE C!
    PADDLE-2 @ PADDLE-X@ OVER OAM-X C!
    PADDLE-2 @ PADDLE-Y@ 08h + OVER OAM-Y C!
    OAM-X-FLIP
  DROP
;

: INIT-PADDLES
  10h  PADDLE-1 @ PADDLE-X!
  50h  PADDLE-1 @ PADDLE-Y!
  02h  PADDLE-1 @ PADDLE-SPEED!
  98h  PADDLE-2 @ PADDLE-X!
  50h  PADDLE-2 @ PADDLE-Y!
  02h  PADDLE-2 @ PADDLE-SPEED!
  INIT-PADDLE-1
  INIT-PADDLE-2
;

: INIT-BALL
  04h PONG-OAM @ OAM-ENTRY
    02h OVER OAM-TILE C!
  DROP
  80d BALL @ BALL-X!
  70d BALL @ BALL-Y!
  02h BALL @ BALL-SPEED-X!
  02h BALL @ BALL-SPEED-Y!
  DIR-SW BALL @ BALL-DIR!
;

: DRAW-BALL
  04h PONG-OAM @ OAM-ENTRY
    BALL @ BALL-X@ OVER OAM-X C!
    BALL @ BALL-Y@ OVER OAM-Y C!
  DROP
;

: DRAW-PADDLE-1
  00h PONG-OAM @ OAM-ENTRY
    PADDLE-1 @ PADDLE-X@ OVER OAM-X C!
    PADDLE-1 @ PADDLE-Y@ OVER OAM-Y C!
  DROP
  01h PONG-OAM @ OAM-ENTRY
    PADDLE-1 @ PADDLE-X@ OVER OAM-X C!
    PADDLE-1 @ PADDLE-Y@ 08h + OVER OAM-Y C!
  DROP
;

: DRAW-PADDLE-2
  02h PONG-OAM @ OAM-ENTRY
    PADDLE-2 @ PADDLE-X@ OVER OAM-X C!
    PADDLE-2 @ PADDLE-Y@ OVER OAM-Y C!
  DROP
  03h PONG-OAM @ OAM-ENTRY
    PADDLE-2 @ PADDLE-X@ OVER OAM-X C!
    PADDLE-2 @ PADDLE-Y@ 08h + OVER OAM-Y C!
  DROP
;

: PADDLE-1-INC-POS! ( speed -- )
  PADDLE-1 @ PADDLE-Y@ + PADDLE-1 @ PADDLE-Y!
;

: PADDLE-1-DEC-POS! ( speed -- )
  PADDLE-1 @ PADDLE-Y@ SWAP - PADDLE-1 @ PADDLE-Y!
;

: PADDLE-2-INC-POS! ( speed -- )
  PADDLE-2 @ PADDLE-Y@ + PADDLE-2 @ PADDLE-Y!
;

: PADDLE-2-DEC-POS! ( speed -- )
  PADDLE-2 @ PADDLE-Y@ SWAP - PADDLE-2 @ PADDLE-Y!
;

: BOUNCE-BALL-X!
  BALL @ BALL-DIR@
    DUP DIR-NW = [ DIR-NE BALL @ BALL-DIR! ] WHEN
    DUP DIR-NE = [ DIR-NW BALL @ BALL-DIR! ] WHEN
    DUP DIR-SW = [ DIR-SE BALL @ BALL-DIR! ] WHEN
    DUP DIR-SE = [ DIR-SW BALL @ BALL-DIR! ] WHEN
  DROP
;

: BOUNCE-BALL-Y!
  BALL @ BALL-DIR@
    DUP DIR-NW = [ DIR-SW BALL @ BALL-DIR! ] WHEN
    DUP DIR-NE = [ DIR-SE BALL @ BALL-DIR! ] WHEN
    DUP DIR-SW = [ DIR-NW BALL @ BALL-DIR! ] WHEN
    DUP DIR-SE = [ DIR-NE BALL @ BALL-DIR! ] WHEN
  DROP
;

: UPDATE-PADDLE-1
  READ-JOYPAD
    DUP JOYPAD-B & 
      [ 04h PADDLE-1 @ PADDLE-SPEED! ] 
      [ 02h PADDLE-1 @ PADDLE-SPEED! ] 
    IF
    DUP JOYPAD-UP &   [ PADDLE-1 @ PADDLE-SPEED@ PADDLE-1-DEC-POS! ] WHEN
    DUP JOYPAD-DOWN & [ PADDLE-1 @ PADDLE-SPEED@ PADDLE-1-INC-POS! ] WHEN
  DROP
;

: UPDATE-PADDLE-2
  READ-JOYPAD
    DUP JOYPAD-A & 
      [ 04h PADDLE-2 @ PADDLE-SPEED! ] 
      [ 02h PADDLE-2 @ PADDLE-SPEED! ] 
    IF
    DUP JOYPAD-START &   [ PADDLE-2 @ PADDLE-SPEED@ PADDLE-2-DEC-POS! ] WHEN
    DUP JOYPAD-SELECT & [ PADDLE-2 @ PADDLE-SPEED@ PADDLE-2-INC-POS! ] WHEN
  DROP
;

: BALL-POS! ( x y -- )
  BALL @ BALL-Y! BALL @ BALL-X!
;

: BETWEEN? ( n a b -- a<n<b? )
  YONDER SWAP < -ROT
  > AND
;

: CHECK-BALL-PADDLE-COLLISION
  BALL @ BALL-DIR@
    DUP DIR-NW = OVER DIR-SW = OR
      [
        BALL @ BALL-X@ 01h + PADDLE-1 @ PADDLE-X@ DUP 08h + BETWEEN?
        BALL @ BALL-Y@ 01h + PADDLE-1 @ PADDLE-Y@ 02h - PADDLE-1 @ PADDLE-Y@ 12h + BETWEEN? AND
          [ BOUNCE-BALL-X! ]
        WHEN
        ] [ \ ELSE BALL-DIR == DIR-NE OR DIR-SE
        BALL @ BALL-X@ 01h + PADDLE-2 @ PADDLE-X@ DUP 07h - SWAP BETWEEN?
        BALL @ BALL-Y@ 01h + PADDLE-2 @ PADDLE-Y@ 02h - PADDLE-2 @ PADDLE-Y@ 12h + BETWEEN? AND
          [ BOUNCE-BALL-X! ]
        WHEN
      ] 
    IF
  DROP
;

: CHECK-BALL-WALL-COLLISION
  BALL @ BALL-X@ DUP 9d <
    [ ( SCORE-PLAYER-2 ) 80d 70d BALL-POS! ] WHEN
  159d >
    [ ( SCORE-PLAYER-1 ) 80d 70d BALL-POS! ] WHEN
;

: CHECK-BALL-FLOOR-COLLISION
  BALL @ BALL-Y@ DUP 17d <
    [ BOUNCE-BALL-Y! ] WHEN
  151d >
    [ BOUNCE-BALL-Y! ] WHEN
;

: UPDATE-BALL
  BALL @ BALL-DIR@
    DUP DIR-NW = [ BALL @ BALL-X@ BALL @ BALL-SPEED-X@ - BALL @ BALL-Y@ BALL @ BALL-SPEED-Y@ - BALL-POS! ] WHEN
    DUP DIR-NE = [ BALL @ BALL-X@ BALL @ BALL-SPEED-X@ + BALL @ BALL-Y@ BALL @ BALL-SPEED-Y@ - BALL-POS! ] WHEN
    DUP DIR-SW = [ BALL @ BALL-X@ BALL @ BALL-SPEED-X@ - BALL @ BALL-Y@ BALL @ BALL-SPEED-Y@ + BALL-POS! ] WHEN
    DUP DIR-SE = [ BALL @ BALL-X@ BALL @ BALL-SPEED-X@ + BALL @ BALL-Y@ BALL @ BALL-SPEED-Y@ + BALL-POS! ] WHEN
  DROP
  CHECK-BALL-PADDLE-COLLISION
  CHECK-BALL-FLOOR-COLLISION
  CHECK-BALL-WALL-COLLISION
;

SCREEN-OFF
LOAD-TILES
INIT-PONG-OAM INIT-BALL INIT-PADDLES
DRAW-BALL DRAW-PADDLE-1 DRAW-PADDLE-2
SCREEN-ON

[ 
  FRAME-STATE @ 00h = [ PONG-OAM @ START-OAM-DMA ] WHEN
  FRAME-STATE @ 01h = [
    UPDATE-PADDLE-1 UPDATE-PADDLE-2 UPDATE-BALL
    DRAW-PADDLE-1 DRAW-PADDLE-2 DRAW-BALL
  ] WHEN
  UPDATE-FRAME-STATE
  TRUE
] WHILE

